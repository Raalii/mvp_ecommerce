datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(CUSTOMER)
  
  // Relations NextAuth
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  
  // Relations E-commerce
  addresses     Address[]
  orders        Order[]
  cart          Cart?
  reviews       ProductReview[]
  
  // Timestamps
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id              String          @id @default(cuid())
  name            String
  slug            String          @unique
  description     String
  price           Decimal         @db.Decimal(10, 2)
  compareAtPrice  Decimal?        @db.Decimal(10, 2)
  status          ProductStatus   @default(DRAFT)
  stockQuantity   Int
  sku             String?         @unique
  
  // SEO
  seoTitle        String?
  seoDescription  String?
  
  // Relations
  categories      Category[]
  variants        ProductVariant[]
  images          ProductImage[]
  reviews         ProductReview[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  
  // Audit
  createdBy      String          // User ID who created
  updatedBy      String          // User ID who last updated
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

model ProductVariant {
  id            String    @id @default(cuid())
  productId     String
  name          String
  sku           String?   @unique
  price         Decimal   @db.Decimal(10, 2)
  stockQuantity Int
  options       Json      // {color: "red", size: "XL"}
  
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int      @default(0)
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id              String     @id @default(cuid())
  name            String
  slug            String     @unique
  description     String?
  image           String?
  seoTitle        String?
  seoDescription  String?
  
  // Hi√©rarchie
  parentId        String?
  parent          Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  
  products        Product[]
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  status          OrderStatus   @default(PENDING)
  
  // Montants
  total           Decimal       @db.Decimal(10, 2)
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2)
  shipping        Decimal       @db.Decimal(10, 2)
  discountAmount  Decimal       @db.Decimal(10, 2) @default(0)
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address       @relation("OrderShipping", fields: [shippingAddressId], references: [id])
  billingAddress  Address       @relation("OrderBilling", fields: [billingAddressId], references: [id])
  shippingAddressId String
  billingAddressId  String
  
  // Paiement
  paymentIntentId String?
  paymentStatus   PaymentStatus @default(PENDING)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  productId   String
  variantId   String?
  quantity    Int
  price       Decimal   @db.Decimal(10, 2)
  name        String
  options     Json?
  
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
}

model Cart {
  id          String     @id @default(cuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  items       CartItem[]
  discountId  String?
  discount    Discount?  @relation(fields: [discountId], references: [id])
  updatedAt   DateTime   @updatedAt
}

model CartItem {
  id          String    @id @default(cuid())
  cartId      String
  productId   String
  variantId   String?
  quantity    Int
  
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
}

model Address {
  id          String    @id @default(cuid())
  userId      String
  type        AddressType
  isDefault   Boolean   @default(false)
  
  firstName   String
  lastName    String
  street      String
  city        String
  state       String?
  postalCode  String
  country     String
  phone       String?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ordersShipping Order[] @relation("OrderShipping")
  ordersBilling  Order[] @relation("OrderBilling")
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}


model Discount {
  id          String        @id @default(cuid())
  code        String        @unique
  type        DiscountType
  value       Decimal       @db.Decimal(10, 2)
  minAmount   Decimal?      @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int          @default(0)
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean      @default(true)
  
  carts       Cart[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model ProductReview {
  id          String       @id @default(cuid())
  productId   String
  userId      String
  rating      Int
  title       String?
  content     String
  status      ReviewStatus @default(PENDING)
  
  product     Product      @relation(fields: [productId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}


model AdminAction {
  id          String    @id @default(cuid())
  userId      String
  action      String
  entity      String    // "product", "order", etc.
  entityId    String
  details     Json
  createdAt   DateTime  @default(now())
}